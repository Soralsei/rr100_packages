#! /usr/bin/env python3
import numpy as np
import rospy
# from std_srvs.srv import Empty

from rr100_rl.env import Environment
from rr100_rl.env import ReverseAckermannEnvironment
from rr100_rl.controller import RLControllerBridge

if __name__ == "__main__":

    rospy.init_node("rl_controller_bridge", log_level=rospy.INFO)

    max_xy_distance = rospy.get_param("~max_xy_distance", 2.0)
    action_frequency = rospy.get_param("~action_frequency", 40)
    is_rl_ackermann = rospy.get_param("~is_rl_ackermann", False)

    action_server: str = rospy.get_param("~action_server", "rl_controller") # type: ignore
    odom_frame = rospy.get_param("~odom_frame", "odom")
    base_frame = rospy.get_param("~base_frame", "base_footprint")

    cmd_topic = rospy.get_param("~cmd_vel_topic", "/cmd_vel")
    odom_topic = rospy.get_param("~odom_topic", "/odometry")
    goal_marker_topic = rospy.get_param("~goal_marker_topic", "rl_controller/goal_marker")
    joint_states_topic = rospy.get_param("~joint_states_topic", "/joint_states")

    wheel_joint_names = rospy.get_param("~wheel_joint_names", ["front_left_wheel", "front_right_wheel"])
    steering_joint_names = rospy.get_param(
        "~steering_joint_name", ["front_left_steering_joint", "front_right_steering_joint"]
    )

    x_limits : dict = rospy.get_param("/rr100_steering_controller/linear/x", {}) # type: ignore
    z_limits : dict = rospy.get_param("/rr100_steering_controller/angular/z", {}) # type: ignore
    
    limits = [0.5, z_limits["max_velocity"]]
    variation_limits = [2.0, z_limits["max_acceleration"]]
    if is_rl_ackermann:
        limits = rospy.get_param("~wheel_limits", [np.pi, 0.347])   # rad/s, rad
        variation_limits = [2 * np.pi, np.pi / 6]                   # rad/sÂ², rad/s
    
    env_cls = ReverseAckermannEnvironment if is_rl_ackermann else Environment
    env = env_cls(  
        num_observation=11,                         # type: ignore
        global_frame=odom_frame,                    # type: ignore
        cmd_vel_topic=cmd_topic,                    # type: ignore
        base_frame=base_frame,                      # type: ignore
        wheel_joint_names=wheel_joint_names,          # type: ignore
        steering_joint_names=steering_joint_names,    # type: ignore
        odom_topic=odom_topic,                      # type: ignore
        joint_states_topic=joint_states_topic,      # type: ignore
        max_velocity=limits,
        max_acceleration=variation_limits,
        max_xy_distance=max_xy_distance,            # type: ignore
        action_frequency=action_frequency,          # type: ignore
    )

    distance_threshold: float = rospy.get_param("distance_threshold", 0.15)  # type: ignore
    goal_max_iter: int = rospy.get_param("goal_max_iter", 500)  # type: ignore

    controller = RLControllerBridge(
        env,
        goal_marker_topic=goal_marker_topic, # type: ignore
        action_server_name=action_server,
        distance_threshold=distance_threshold,
        goal_max_iter=goal_max_iter,
    )

    def on_shutdown():
        controller.end()

    rospy.on_shutdown(on_shutdown)

    # gazebo_pause_srv = rospy.ServiceProxy("/gazebo/pause_physics", Empty)
    # gazebo_play_srv = rospy.ServiceProxy("/gazebo/unpause_physics", Empty)
    # gazebo_pause_srv.wait_for_service()
    # gazebo_play_srv.wait_for_service()
    
    
    # env.initialize()
    # env.initialize(10)
    # duration = rospy.Rate(40)
    # action = np.ones((2,))
    # env.reset()
    
    # actions = []
    
    # for _ in range(40):
    #     scaled_action = env.set_action(action)
    #     actions.append(scaled_action)
    
    # actions = np.array(actions)
    # print(actions)
    # accelerations = np.diff(actions, axis=0) * 40
    # print(accelerations)
    
    # print(np.max(accelerations, axis=0))

    # env.initialize(5, 1/40.0)
    # duration = rospy.Rate(40)
    # act = np.zeros(2)
    # act[0] = 1.0
    # act[1] = 1.0
    # env.previous_action = np.zeros(2)
    # env.goal = PointStamped()
    # env.reset()

    # gazebo_pause_srv.call()
    # input("Press enter to continue...")
    # gazebo_play_srv.call()
    
    # for _ in range(40):
    #     obs = env.step(act, duration)
    #     print(f"Observation : {obs}")
    # gazebo_pause_srv.call()
    
    # env.stop()

    # rospy.signal_shutdown(None)
